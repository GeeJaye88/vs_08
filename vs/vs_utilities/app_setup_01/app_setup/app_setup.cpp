////////////////////////////////////////////////////////////////////////////////

// ---------- cai.cpp ----------
/*!
\file cai.cpp
\brief Create Application Include
\author Gareth Edwards
\note Vanilla C++
*/

#define _CRT_SECURE_NO_WARNINGS


// ---------- include ----------
#include <stdio.h>   // FILE, 
#include <string.h>  // printf,
#include <ctype.h>   // toupper, 


// ---------- GLOBAL ----------
char * g_namespace = NULL;
char * g_prefix = NULL;
FILE * g_file = NULL;

// ---------- Declare ----------
int WriteHeader();
int Step_1_DefineAppHashName();
int Step_2_InitialiseAppName();
int Step_3_IncludeAppVersion();
int Step_4_IncludeAppHeader();
int Step_5_InitialiseAppSocket();
int Step_6_InitialiseAppInterface();
int WriteVSRC();

// ---------- MAIN ----------
int main(int argc, char* argv[])
{
	// IF command line comprised of three args THEN
	if ( argc == 3 )
	{
		// Open setup file
		char *setup_filename = "vs_app_setup.h";
		g_file = fopen(setup_filename, "wb");
		if ( g_file != NULL)
		{
			// Set globals
			g_namespace = argv[1];
			g_prefix = argv[2];

			// Create
			WriteHeader();
			Step_1_DefineAppHashName();
			Step_2_InitialiseAppName();
			Step_3_IncludeAppVersion();
			Step_4_IncludeAppHeader();
			Step_5_InitialiseAppSocket();
			Step_6_InitialiseAppInterface();

			// Close file
			fclose(g_file);
		}
		// ELSE report
		else
		{
			printf("Error: Failed to open application include file %s!", setup_filename);
			return -1;
		}

		// Open resource file
		char *vsrc_filename = "../../vs.rc";
		g_file = fopen(vsrc_filename, "wb");
		if ( g_file != NULL )
		{
			// Create
			WriteVSRC();

			// Close file
			fclose(g_file);
		}
		// ELSE report
		else
		{
			printf("Error: Failed to open application resource file %s!", vsrc_filename);
			return -1;
		}

		// Report
		printf(
				"Success: Resource file %s and application setup file %s created.",
				vsrc_filename,
				setup_filename
			);

	}
	// ELSE report
	else
	{
		char *plural = argc == 1 ? "argument" : "arguments";
		printf("Error: Only %d command line %s\nUsage: app_setup.exe [namespace] [prefix]", argc, plural);
		printf("Example: app_setup.exe capture_02 c2\n");
		return -1;
	}

	// Done
	return 0;
}


// ---------- WriteHeader ----------
int WriteHeader()
{
	fputs("////////////////////////////////////////////////////////////////////////////////\n", g_file);
	fputs("// ---------- vs_app_setup.h ----------\n", g_file);
	fputs("/*!\n", g_file);
	fputs("\\file vs_app_setup.h\n", g_file);
	fputs("\\brief Application interface setup\n", g_file);
	fputs("\\author Gareth Edwards\n", g_file);
	fputs("\\note Generated by app_setup application.\n", g_file);
	fputs("*/\n", g_file);
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}

// ---------- Step 1: Define application #[name] ----------
//
int Step_1_DefineAppHashName()
{
	// Begin
	fputs("// ---------- #DEFINE ----------\n", g_file);
	fputs("//\n", g_file);
	fputs("// Step 1: Create application #define\n", g_file);
	fputs("//\n", g_file);

	// *local
	char defintion[256];
	char upper_name[256];
	int  i=0;

	// Convert namespace to "UPPER"
	while ( g_namespace[i] )
	{
		upper_name[i] = toupper(g_namespace[i]);
		i++;
	}
	upper_name[i] = '\0';
	
	// Create #define
	strcpy(defintion, "#define VS_APP_");
	strcat(defintion, upper_name);
	strcat(defintion, "\n");

	// Store
	fputs(defintion, g_file);

	// End
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}



// ---------- Step 2: Initialise application name ----------
//
int Step_2_InitialiseAppName()
{
	// Begin
	fputs("// ---------- NAME ----------\n", g_file);
	fputs("//\n", g_file);
	fputs("//Included in vs_sys_windows.cpp\n", g_file);
	fputs("//\n", g_file);
	fputs("// Step 2: Initialise char *app_name = \"[namespace]\";\n", g_file);
	fputs("//\n", g_file);
	fputs("#ifdef VS_APPLICATION_APPNAME\n", g_file);

	// Create #include
	char include[256];
	sprintf(include, "char *app_name = \"%s\";\n", g_namespace);

	// Store
	fputs(include, g_file);

	// End
	fputs("#undef VS_APPLICATION_APPNAME\n", g_file);
	fputs("#endif\n", g_file);
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}


// ---------- Step 3: Include application version #include ----------
//
int Step_3_IncludeAppVersion()
{
	// Begin
	fputs("// ---------- VERSION ----------\n", g_file);
	fputs("//\n", g_file);
	fputs("//Included in vs_sys_windows.cpp\n", g_file);
	fputs("//\n", g_file);
	fputs("// Step 3: Include application [Major].[Minor].[Patch].[Build] version\n", g_file);
	fputs("//\n", g_file);
	fputs("#ifdef VS_APPLICATION_APPVERSION\n", g_file);

	// Create #include
	char include[256];
	sprintf(include, "#include \"../../vs_application/%s/header/%s_version.h\"\n", g_namespace, g_prefix);

	// Store
	fputs(include, g_file);

	// End
	fputs("#undef VS_APPLICATION_APPVERSION\n", g_file);
	fputs("#endif\n", g_file);
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}


// ---------- Step 4: Include application header ----------
//
int Step_4_IncludeAppHeader()
{
	// Begin
	fputs("// ---------- HEADER ----------\n", g_file);
	fputs("//\n", g_file);
	fputs("//Included in vs_app_interface.h\n", g_file);
	fputs("//\n", g_file);
	fputs("// Step 4: Include application header\n", g_file);
	fputs("//\n", g_file);
	fputs("#ifdef VS_APPLICATION_INCLUDE\n", g_file);

	// Create #include
	char include[256];
	sprintf(include, "#include \"../../vs_application/%s/header/%s_application.h\"\n", g_namespace, g_prefix);

	// Store
	fputs(include, g_file);

	// End
	fputs("#undef VS_APPLICATION_INCLUDE\n", g_file);
	fputs("#endif\n", g_file);
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}


// ---------- Step 5: Initialise application socket ----------
//
int Step_5_InitialiseAppSocket()
{
	// Begin
	fputs("// ---------- SOCKET ----------\n", g_file);
	fputs("//\n", g_file);
	fputs("//Included in vs_app_interface.cpp\n", g_file);
	fputs("//\n", g_file);
	fputs("// Step 5: Initialise application socket\n", g_file);
	fputs("//\n", g_file);
	fputs("#ifdef VS_APPLICATION_SOCKET\n", g_file);

	// Create socket
	char include[256];
	sprintf(include, "%s::application *application;\n", g_namespace);

	// Store
	fputs(include, g_file);

	// End
	fputs("#undef VS_APPLICATION_SOCKET\n", g_file);
	fputs("#endif\n", g_file);
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}


// ---------- Step 6: Initialise application interface  ----------
//
int Step_6_InitialiseAppInterface()
{
	// Begin
	fputs("// ---------- POINTER ----------\n", g_file);
	fputs("//\n", g_file);
	fputs("//Included in vs_app_interface.cpp\n", g_file);
	fputs("//\n", g_file);
	fputs("// Step 6: Initialise application interface\n", g_file);
	fputs("//\n", g_file);
	fputs("#ifdef VS_APPLICATION_POINTER\n", g_file);

	// Create interface
	char text[256];
	sprintf(text, "if ( !strcmp(application_name, \"%s\") )\n", g_namespace);
	fputs(text, g_file);

	fputs("{\n", g_file);

	sprintf(text, "application_socket.application = new %s::application();\n", g_namespace);
	fputs(text, g_file);

	sprintf(text, "ptr_to_application_framework = &AppInterface::application;;\n");
	fputs(text, g_file);

	fputs("}\n", g_file);

	// End
	fputs("#undef VS_APPLICATION_POINTER\n", g_file);
	fputs("#endif\n", g_file);
	fputs("\n", g_file);
	fputs("\n", g_file);

	// OK
	return 1;
}



// ---------- WriteVSRC ----------
int WriteVSRC()
{
	fputs("////////////////////////////////////////////////////////////////////////////////\n", g_file);

	fputs("// Visual Surface C++ generated resource script.\n", g_file);
	fputs("//\n", g_file);
	fputs("//\n\n", g_file);

	fputs("#include \"vs_resources\\resource.h\"\n", g_file);
	fputs("\n\n", g_file);

	fputs("////////////////////////////////////////////////////////////////////////////////\n", g_file);

	fputs(

		"\n"
		"\n"
		"#define APSTUDIO_READONLY_SYMBOLS\n"
		"////////////////////////////////////////////////////////////////////////////////\n"
		"//\n"
		"// Generated from the TEXTINCLUDE 2 resource.\n"
		"//\n"
		"#include \"windows.h\"\n"
		"////////////////////////////////////////////////////////////////////////////////\n"
		"#undef APSTUDIO_READONLY_SYMBOLS\n"
		"\n"

		"////////////////////////////////////////////////////////////////////////////////\n"
		"// English(U.K.) resources\n"
		"\n"

		"#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENG)\n"

		"#ifdef _WIN32\n"
		"LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_UK\n"
		"#pragma code_page(1252)\n"
		"#endif //_WIN32\n"
		"\n"

		"#ifdef APSTUDIO_INVOKED\n"
		"////////////////////////////////////////////////////////////////////////////////\n"
		"//\n"
		"// TEXTINCLUDE\n"
		"//\n"
		"\n"

		"1 TEXTINCLUDE\n"
		"BEGIN\n"
		"\"vs_resources/resource.h\\0\"\n"
		"END\n"
		"\n"

		"2 TEXTINCLUDE\n"
		"BEGIN\n"
		"\"#include \"\"afxres.h\"\"\\r\\n\"\n"
		"\\0\n"
		"END\n"
		"\n"

		"3 TEXTINCLUDE\n"
		"BEGIN\n"
		"\"\\r\\n\"\n"
		"\"\\0\"\n"
		"END\n"
		"\n"

		"#endif    // APSTUDIO_INVOKED\n"
		"\n",

		g_file
	);

	fputs("////////////////////////////////////////////////////////////////////////////////\n", g_file);

	fputs("//\n", g_file);
	fputs("// ICONS\n", g_file);
	fputs("//\n", g_file);
	fputs("\n", g_file);

	// Icon with lowest ID value placed first to ensure application icon
	// remains consistent on all systems.

	fputs("IDI_HICON               ICON                    \"vs_resources\\icons_", g_file);
	fputs(g_prefix, g_file);
	fputs("\\vs_48.ico\"\n",g_file);

	fputs("IDI_HICONSM             ICON                    \"vs_resources\\icons_", g_file);
	fputs(g_prefix, g_file);
	fputs("\\vs_16.ico\"\n", g_file);

	fputs("\n", g_file);

	fputs("////////////////////////////////////////////////////////////////////////////////\n", g_file);

	fputs("//\n", g_file);
	fputs("// IMAGES\n", g_file);
	fputs("//\n", g_file);
	fputs("\n", g_file);

	fputs("IDR_RCDATA0             RCDATA                  \"vs_resources\\images\\vs_00.tga\"\n", g_file);
	fputs("IDR_RCDATA1             RCDATA                  \"vs_resources\\images\\vs_01.tga\"\n", g_file);
	fputs("IDR_RCDATA2             RCDATA                  \"vs_resources\\images\\vs_02.tga\"\n", g_file);
	fputs("IDR_RCDATA3             RCDATA                  \"vs_resources\\images\\vs_03.tga\"\n", g_file);
	fputs("\n", g_file);


	fputs("#endif    // English (U.K.) resources\n", g_file);
	fputs("\n", g_file);

	fputs("////////////////////////////////////////////////////////////////////////////////\n", g_file);


	// OK
	return 1;
}
